"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ethers_1 = require("ethers");
const dotenv = __importStar(require("dotenv"));
const bls_signatures_1 = __importDefault(require("bls-signatures"));
dotenv.config();
const provider = new ethers_1.ethers.providers.JsonRpcProvider(process.env.RPC_URL);
const wallet = new ethers_1.ethers.Wallet(process.env.PRIVATE_KEY, provider);
const delegationManagerAddress = process.env.DELEGATION_MANAGER_ADDRESS;
const contractAddress = process.env.CONTRACT_ADDRESS;
const registryCoordinatorAddress = process.env.REGISTRY_COORDINATOR_ADDRESS;
const delegationABI = [
    { "type": "function", "name": "DELEGATION_APPROVAL_TYPEHASH", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "DOMAIN_TYPEHASH", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "STAKER_DELEGATION_TYPEHASH", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "beaconChainETHStrategy", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IStrategy" }], "stateMutability": "view" }, { "type": "function", "name": "calculateCurrentStakerDelegationDigestHash", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "operator", "type": "address", "internalType": "address" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "calculateDelegationApprovalDigestHash", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "operator", "type": "address", "internalType": "address" }, { "name": "_delegationApprover", "type": "address", "internalType": "address" }, { "name": "approverSalt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "calculateStakerDelegationDigestHash", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "_stakerNonce", "type": "uint256", "internalType": "uint256" }, { "name": "operator", "type": "address", "internalType": "address" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "calculateWithdrawalRoot", "inputs": [{ "name": "withdrawal", "type": "tuple", "internalType": "struct IDelegationManager.Withdrawal", "components": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "delegatedTo", "type": "address", "internalType": "address" }, { "name": "withdrawer", "type": "address", "internalType": "address" }, { "name": "nonce", "type": "uint256", "internalType": "uint256" }, { "name": "startBlock", "type": "uint32", "internalType": "uint32" }, { "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }] }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "pure" }, { "type": "function", "name": "completeQueuedWithdrawal", "inputs": [{ "name": "withdrawal", "type": "tuple", "internalType": "struct IDelegationManager.Withdrawal", "components": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "delegatedTo", "type": "address", "internalType": "address" }, { "name": "withdrawer", "type": "address", "internalType": "address" }, { "name": "nonce", "type": "uint256", "internalType": "uint256" }, { "name": "startBlock", "type": "uint32", "internalType": "uint32" }, { "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }] }, { "name": "tokens", "type": "address[]", "internalType": "contract IERC20[]" }, { "name": "middlewareTimesIndex", "type": "uint256", "internalType": "uint256" }, { "name": "receiveAsTokens", "type": "bool", "internalType": "bool" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "completeQueuedWithdrawals", "inputs": [{ "name": "withdrawals", "type": "tuple[]", "internalType": "struct IDelegationManager.Withdrawal[]", "components": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "delegatedTo", "type": "address", "internalType": "address" }, { "name": "withdrawer", "type": "address", "internalType": "address" }, { "name": "nonce", "type": "uint256", "internalType": "uint256" }, { "name": "startBlock", "type": "uint32", "internalType": "uint32" }, { "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }] }, { "name": "tokens", "type": "address[][]", "internalType": "contract IERC20[][]" }, { "name": "middlewareTimesIndexes", "type": "uint256[]", "internalType": "uint256[]" }, { "name": "receiveAsTokens", "type": "bool[]", "internalType": "bool[]" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "cumulativeWithdrawalsQueued", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "decreaseDelegatedShares", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "strategy", "type": "address", "internalType": "contract IStrategy" }, { "name": "shares", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "delegateTo", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }, { "name": "approverSignatureAndExpiry", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }, { "name": "approverSalt", "type": "bytes32", "internalType": "bytes32" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "delegateToBySignature", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "operator", "type": "address", "internalType": "address" }, { "name": "stakerSignatureAndExpiry", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }, { "name": "approverSignatureAndExpiry", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }, { "name": "approverSalt", "type": "bytes32", "internalType": "bytes32" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "delegatedTo", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "delegationApprover", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "delegationApproverSaltIsSpent", "inputs": [{ "name": "_delegationApprover", "type": "address", "internalType": "address" }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "domainSeparator", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "earningsReceiver", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "getOperatorShares", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }, { "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }], "outputs": [{ "name": "", "type": "uint256[]", "internalType": "uint256[]" }], "stateMutability": "view" }, { "type": "function", "name": "getWithdrawalDelay", "inputs": [{ "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "increaseDelegatedShares", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "strategy", "type": "address", "internalType": "contract IStrategy" }, { "name": "shares", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "isDelegated", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "isOperator", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "migrateQueuedWithdrawals", "inputs": [{ "name": "withdrawalsToQueue", "type": "tuple[]", "internalType": "struct IStrategyManager.DeprecatedStruct_QueuedWithdrawal[]", "components": [{ "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }, { "name": "staker", "type": "address", "internalType": "address" }, { "name": "withdrawerAndNonce", "type": "tuple", "internalType": "struct IStrategyManager.DeprecatedStruct_WithdrawerAndNonce", "components": [{ "name": "withdrawer", "type": "address", "internalType": "address" }, { "name": "nonce", "type": "uint96", "internalType": "uint96" }] }, { "name": "withdrawalStartBlock", "type": "uint32", "internalType": "uint32" }, { "name": "delegatedAddress", "type": "address", "internalType": "address" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "minWithdrawalDelayBlocks", "inputs": [], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "modifyOperatorDetails", "inputs": [{ "name": "newOperatorDetails", "type": "tuple", "internalType": "struct IDelegationManager.OperatorDetails", "components": [{ "name": "earningsReceiver", "type": "address", "internalType": "address" }, { "name": "delegationApprover", "type": "address", "internalType": "address" }, { "name": "stakerOptOutWindowBlocks", "type": "uint32", "internalType": "uint32" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "operatorDetails", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "tuple", "internalType": "struct IDelegationManager.OperatorDetails", "components": [{ "name": "earningsReceiver", "type": "address", "internalType": "address" }, { "name": "delegationApprover", "type": "address", "internalType": "address" }, { "name": "stakerOptOutWindowBlocks", "type": "uint32", "internalType": "uint32" }] }], "stateMutability": "view" }, { "type": "function", "name": "operatorShares", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }, { "name": "strategy", "type": "address", "internalType": "contract IStrategy" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "queueWithdrawals", "inputs": [{ "name": "queuedWithdrawalParams", "type": "tuple[]", "internalType": "struct IDelegationManager.QueuedWithdrawalParams[]", "components": [{ "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }, { "name": "withdrawer", "type": "address", "internalType": "address" }] }], "outputs": [{ "name": "", "type": "bytes32[]", "internalType": "bytes32[]" }], "stateMutability": "nonpayable" }, { "type": "function", "name": "registerAsOperator", "inputs": [{ "name": "registeringOperatorDetails", "type": "tuple", "internalType": "struct IDelegationManager.OperatorDetails", "components": [{ "name": "earningsReceiver", "type": "address", "internalType": "address" }, { "name": "delegationApprover", "type": "address", "internalType": "address" }, { "name": "stakerOptOutWindowBlocks", "type": "uint32", "internalType": "uint32" }] }, { "name": "metadataURI", "type": "string", "internalType": "string" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "stakerNonce", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "stakerOptOutWindowBlocks", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "strategyWithdrawalDelayBlocks", "inputs": [{ "name": "strategy", "type": "address", "internalType": "contract IStrategy" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "undelegate", "inputs": [{ "name": "staker", "type": "address", "internalType": "address" }], "outputs": [{ "name": "withdrawalRoot", "type": "bytes32[]", "internalType": "bytes32[]" }], "stateMutability": "nonpayable" }, { "type": "function", "name": "updateOperatorMetadataURI", "inputs": [{ "name": "metadataURI", "type": "string", "internalType": "string" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "event", "name": "MinWithdrawalDelayBlocksSet", "inputs": [{ "name": "previousValue", "type": "uint256", "indexed": false, "internalType": "uint256" }, { "name": "newValue", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "OperatorDetailsModified", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newOperatorDetails", "type": "tuple", "indexed": false, "internalType": "struct IDelegationManager.OperatorDetails", "components": [{ "name": "earningsReceiver", "type": "address", "internalType": "address" }, { "name": "delegationApprover", "type": "address", "internalType": "address" }, { "name": "stakerOptOutWindowBlocks", "type": "uint32", "internalType": "uint32" }] }], "anonymous": false }, { "type": "event", "name": "OperatorMetadataURIUpdated", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "metadataURI", "type": "string", "indexed": false, "internalType": "string" }], "anonymous": false }, { "type": "event", "name": "OperatorRegistered", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operatorDetails", "type": "tuple", "indexed": false, "internalType": "struct IDelegationManager.OperatorDetails", "components": [{ "name": "earningsReceiver", "type": "address", "internalType": "address" }, { "name": "delegationApprover", "type": "address", "internalType": "address" }, { "name": "stakerOptOutWindowBlocks", "type": "uint32", "internalType": "uint32" }] }], "anonymous": false }, { "type": "event", "name": "OperatorSharesDecreased", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "staker", "type": "address", "indexed": false, "internalType": "address" }, { "name": "strategy", "type": "address", "indexed": false, "internalType": "contract IStrategy" }, { "name": "shares", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "OperatorSharesIncreased", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "staker", "type": "address", "indexed": false, "internalType": "address" }, { "name": "strategy", "type": "address", "indexed": false, "internalType": "contract IStrategy" }, { "name": "shares", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "StakerDelegated", "inputs": [{ "name": "staker", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operator", "type": "address", "indexed": true, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "StakerForceUndelegated", "inputs": [{ "name": "staker", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operator", "type": "address", "indexed": true, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "StakerUndelegated", "inputs": [{ "name": "staker", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operator", "type": "address", "indexed": true, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "StrategyWithdrawalDelayBlocksSet", "inputs": [{ "name": "strategy", "type": "address", "indexed": false, "internalType": "contract IStrategy" }, { "name": "previousValue", "type": "uint256", "indexed": false, "internalType": "uint256" }, { "name": "newValue", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "WithdrawalCompleted", "inputs": [{ "name": "withdrawalRoot", "type": "bytes32", "indexed": false, "internalType": "bytes32" }], "anonymous": false }, { "type": "event", "name": "WithdrawalMigrated", "inputs": [{ "name": "oldWithdrawalRoot", "type": "bytes32", "indexed": false, "internalType": "bytes32" }, { "name": "newWithdrawalRoot", "type": "bytes32", "indexed": false, "internalType": "bytes32" }], "anonymous": false }, { "type": "event", "name": "WithdrawalQueued", "inputs": [{ "name": "withdrawalRoot", "type": "bytes32", "indexed": false, "internalType": "bytes32" }, { "name": "withdrawal", "type": "tuple", "indexed": false, "internalType": "struct IDelegationManager.Withdrawal", "components": [{ "name": "staker", "type": "address", "internalType": "address" }, { "name": "delegatedTo", "type": "address", "internalType": "address" }, { "name": "withdrawer", "type": "address", "internalType": "address" }, { "name": "nonce", "type": "uint256", "internalType": "uint256" }, { "name": "startBlock", "type": "uint32", "internalType": "uint32" }, { "name": "strategies", "type": "address[]", "internalType": "contract IStrategy[]" }, { "name": "shares", "type": "uint256[]", "internalType": "uint256[]" }] }], "anonymous": false }
];
const contractABI = [
    { "type": "constructor", "inputs": [{ "name": "_avsDirectory", "type": "address", "internalType": "contract IAVSDirectory" }, { "name": "_registryCoordinator", "type": "address", "internalType": "contract IRegistryCoordinator" }, { "name": "_stakeRegistry", "type": "address", "internalType": "contract IStakeRegistry" }], "stateMutability": "nonpayable" }, { "type": "function", "name": "allTaskHashes", "inputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "allTaskResponses", "inputs": [{ "name": "", "type": "address", "internalType": "address" }, { "name": "", "type": "uint32", "internalType": "uint32" }], "outputs": [{ "name": "", "type": "bytes", "internalType": "bytes" }], "stateMutability": "view" }, { "type": "function", "name": "avsDirectory", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "createNewTask", "inputs": [{ "name": "name", "type": "string", "internalType": "string" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "deregisterOperatorFromAVS", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "getOperatorRestakedStrategies", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "address[]", "internalType": "address[]" }], "stateMutability": "view" }, { "type": "function", "name": "getRestakeableStrategies", "inputs": [], "outputs": [{ "name": "", "type": "address[]", "internalType": "address[]" }], "stateMutability": "view" }, { "type": "function", "name": "latestTaskNum", "inputs": [], "outputs": [{ "name": "", "type": "uint32", "internalType": "uint32" }], "stateMutability": "view" }, { "type": "function", "name": "owner", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "pause", "inputs": [{ "name": "newPausedStatus", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "pauseAll", "inputs": [], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "paused", "inputs": [{ "name": "index", "type": "uint8", "internalType": "uint8" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "paused", "inputs": [], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "pauserRegistry", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IPauserRegistry" }], "stateMutability": "view" }, { "type": "function", "name": "payForRange", "inputs": [{ "name": "rangePayments", "type": "tuple[]", "internalType": "struct IPaymentCoordinator.RangePayment[]", "components": [{ "name": "strategiesAndMultipliers", "type": "tuple[]", "internalType": "struct IPaymentCoordinator.StrategyAndMultiplier[]", "components": [{ "name": "strategy", "type": "address", "internalType": "contract IStrategy" }, { "name": "multiplier", "type": "uint96", "internalType": "uint96" }] }, { "name": "token", "type": "address", "internalType": "contract IERC20" }, { "name": "amount", "type": "uint256", "internalType": "uint256" }, { "name": "startTimestamp", "type": "uint32", "internalType": "uint32" }, { "name": "duration", "type": "uint32", "internalType": "uint32" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "registerOperatorToAVS", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }, { "name": "operatorSignature", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithSaltAndExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "registryCoordinator", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IRegistryCoordinator" }], "stateMutability": "view" }, { "type": "function", "name": "renounceOwnership", "inputs": [], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "respondToTask", "inputs": [{ "name": "task", "type": "tuple", "internalType": "struct IHelloWorldServiceManager.Task", "components": [{ "name": "name", "type": "string", "internalType": "string" }, { "name": "taskCreatedBlock", "type": "uint32", "internalType": "uint32" }] }, { "name": "referenceTaskIndex", "type": "uint32", "internalType": "uint32" }, { "name": "signature", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "setPauserRegistry", "inputs": [{ "name": "newPauserRegistry", "type": "address", "internalType": "contract IPauserRegistry" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "transferOwnership", "inputs": [{ "name": "newOwner", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "unpause", "inputs": [{ "name": "newPausedStatus", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "updateAVSMetadataURI", "inputs": [{ "name": "_metadataURI", "type": "string", "internalType": "string" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "event", "name": "Initialized", "inputs": [{ "name": "version", "type": "uint8", "indexed": false, "internalType": "uint8" }], "anonymous": false }, { "type": "event", "name": "NewTaskCreated", "inputs": [{ "name": "taskIndex", "type": "uint32", "indexed": true, "internalType": "uint32" }, { "name": "task", "type": "tuple", "indexed": false, "internalType": "struct IHelloWorldServiceManager.Task", "components": [{ "name": "name", "type": "string", "internalType": "string" }, { "name": "taskCreatedBlock", "type": "uint32", "internalType": "uint32" }] }], "anonymous": false }, { "type": "event", "name": "OwnershipTransferred", "inputs": [{ "name": "previousOwner", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newOwner", "type": "address", "indexed": true, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "Paused", "inputs": [{ "name": "account", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newPausedStatus", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "PauserRegistrySet", "inputs": [{ "name": "pauserRegistry", "type": "address", "indexed": false, "internalType": "contract IPauserRegistry" }, { "name": "newPauserRegistry", "type": "address", "indexed": false, "internalType": "contract IPauserRegistry" }], "anonymous": false }, { "type": "event", "name": "TaskResponded", "inputs": [{ "name": "taskIndex", "type": "uint32", "indexed": true, "internalType": "uint32" }, { "name": "task", "type": "tuple", "indexed": false, "internalType": "struct IHelloWorldServiceManager.Task", "components": [{ "name": "name", "type": "string", "internalType": "string" }, { "name": "taskCreatedBlock", "type": "uint32", "internalType": "uint32" }] }, { "name": "operator", "type": "address", "indexed": false, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "Unpaused", "inputs": [{ "name": "account", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newPausedStatus", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }
];
const registryABI = [
    { "type": "constructor", "inputs": [{ "name": "_serviceManager", "type": "address", "internalType": "contract IServiceManager" }, { "name": "_stakeRegistry", "type": "address", "internalType": "contract IStakeRegistry" }, { "name": "_blsApkRegistry", "type": "address", "internalType": "contract IBLSApkRegistry" }, { "name": "_indexRegistry", "type": "address", "internalType": "contract IIndexRegistry" }], "stateMutability": "nonpayable" }, { "type": "function", "name": "OPERATOR_CHURN_APPROVAL_TYPEHASH", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "PUBKEY_REGISTRATION_TYPEHASH", "inputs": [], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "blsApkRegistry", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IBLSApkRegistry" }], "stateMutability": "view" }, { "type": "function", "name": "calculateOperatorChurnApprovalDigestHash", "inputs": [{ "name": "registeringOperator", "type": "address", "internalType": "address" }, { "name": "registeringOperatorId", "type": "bytes32", "internalType": "bytes32" }, { "name": "operatorKickParams", "type": "tuple[]", "internalType": "struct IRegistryCoordinator.OperatorKickParam[]", "components": [{ "name": "quorumNumber", "type": "uint8", "internalType": "uint8" }, { "name": "operator", "type": "address", "internalType": "address" }] }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "churnApprover", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "createQuorum", "inputs": [{ "name": "operatorSetParams", "type": "tuple", "internalType": "struct IRegistryCoordinator.OperatorSetParam", "components": [{ "name": "maxOperatorCount", "type": "uint32", "internalType": "uint32" }, { "name": "kickBIPsOfOperatorStake", "type": "uint16", "internalType": "uint16" }, { "name": "kickBIPsOfTotalStake", "type": "uint16", "internalType": "uint16" }] }, { "name": "minimumStake", "type": "uint96", "internalType": "uint96" }, { "name": "strategyParams", "type": "tuple[]", "internalType": "struct IStakeRegistry.StrategyParams[]", "components": [{ "name": "strategy", "type": "address", "internalType": "contract IStrategy" }, { "name": "multiplier", "type": "uint96", "internalType": "uint96" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "deregisterOperator", "inputs": [{ "name": "quorumNumbers", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "ejectOperator", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }, { "name": "quorumNumbers", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "ejectionCooldown", "inputs": [], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "ejector", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "getCurrentQuorumBitmap", "inputs": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }], "outputs": [{ "name": "", "type": "uint192", "internalType": "uint192" }], "stateMutability": "view" }, { "type": "function", "name": "getOperator", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "tuple", "internalType": "struct IRegistryCoordinator.OperatorInfo", "components": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }, { "name": "status", "type": "uint8", "internalType": "enum IRegistryCoordinator.OperatorStatus" }] }], "stateMutability": "view" }, { "type": "function", "name": "getOperatorFromId", "inputs": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "getOperatorId", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "stateMutability": "view" }, { "type": "function", "name": "getOperatorSetParams", "inputs": [{ "name": "quorumNumber", "type": "uint8", "internalType": "uint8" }], "outputs": [{ "name": "", "type": "tuple", "internalType": "struct IRegistryCoordinator.OperatorSetParam", "components": [{ "name": "maxOperatorCount", "type": "uint32", "internalType": "uint32" }, { "name": "kickBIPsOfOperatorStake", "type": "uint16", "internalType": "uint16" }, { "name": "kickBIPsOfTotalStake", "type": "uint16", "internalType": "uint16" }] }], "stateMutability": "view" }, { "type": "function", "name": "getOperatorStatus", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "uint8", "internalType": "enum IRegistryCoordinator.OperatorStatus" }], "stateMutability": "view" }, { "type": "function", "name": "getQuorumBitmapAtBlockNumberByIndex", "inputs": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }, { "name": "blockNumber", "type": "uint32", "internalType": "uint32" }, { "name": "index", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "uint192", "internalType": "uint192" }], "stateMutability": "view" }, { "type": "function", "name": "getQuorumBitmapHistoryLength", "inputs": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "getQuorumBitmapIndicesAtBlockNumber", "inputs": [{ "name": "blockNumber", "type": "uint32", "internalType": "uint32" }, { "name": "operatorIds", "type": "bytes32[]", "internalType": "bytes32[]" }], "outputs": [{ "name": "", "type": "uint32[]", "internalType": "uint32[]" }], "stateMutability": "view" }, { "type": "function", "name": "getQuorumBitmapUpdateByIndex", "inputs": [{ "name": "operatorId", "type": "bytes32", "internalType": "bytes32" }, { "name": "index", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "tuple", "internalType": "struct IRegistryCoordinator.QuorumBitmapUpdate", "components": [{ "name": "updateBlockNumber", "type": "uint32", "internalType": "uint32" }, { "name": "nextUpdateBlockNumber", "type": "uint32", "internalType": "uint32" }, { "name": "quorumBitmap", "type": "uint192", "internalType": "uint192" }] }], "stateMutability": "view" }, { "type": "function", "name": "indexRegistry", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IIndexRegistry" }], "stateMutability": "view" }, { "type": "function", "name": "initialize", "inputs": [{ "name": "_initialOwner", "type": "address", "internalType": "address" }, { "name": "_churnApprover", "type": "address", "internalType": "address" }, { "name": "_ejector", "type": "address", "internalType": "address" }, { "name": "_pauserRegistry", "type": "address", "internalType": "contract IPauserRegistry" }, { "name": "_initialPausedStatus", "type": "uint256", "internalType": "uint256" }, { "name": "_operatorSetParams", "type": "tuple[]", "internalType": "struct IRegistryCoordinator.OperatorSetParam[]", "components": [{ "name": "maxOperatorCount", "type": "uint32", "internalType": "uint32" }, { "name": "kickBIPsOfOperatorStake", "type": "uint16", "internalType": "uint16" }, { "name": "kickBIPsOfTotalStake", "type": "uint16", "internalType": "uint16" }] }, { "name": "_minimumStakes", "type": "uint96[]", "internalType": "uint96[]" }, { "name": "_strategyParams", "type": "tuple[][]", "internalType": "struct IStakeRegistry.StrategyParams[][]", "components": [{ "name": "strategy", "type": "address", "internalType": "contract IStrategy" }, { "name": "multiplier", "type": "uint96", "internalType": "uint96" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "isChurnApproverSaltUsed", "inputs": [{ "name": "", "type": "bytes32", "internalType": "bytes32" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "lastEjectionTimestamp", "inputs": [{ "name": "", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "numRegistries", "inputs": [], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "owner", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "pause", "inputs": [{ "name": "newPausedStatus", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "pauseAll", "inputs": [], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "paused", "inputs": [{ "name": "index", "type": "uint8", "internalType": "uint8" }], "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }], "stateMutability": "view" }, { "type": "function", "name": "paused", "inputs": [], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "pauserRegistry", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IPauserRegistry" }], "stateMutability": "view" }, { "type": "function", "name": "pubkeyRegistrationMessageHash", "inputs": [{ "name": "operator", "type": "address", "internalType": "address" }], "outputs": [{ "name": "", "type": "tuple", "internalType": "struct BN254.G1Point", "components": [{ "name": "X", "type": "uint256", "internalType": "uint256" }, { "name": "Y", "type": "uint256", "internalType": "uint256" }] }], "stateMutability": "view" }, { "type": "function", "name": "quorumCount", "inputs": [], "outputs": [{ "name": "", "type": "uint8", "internalType": "uint8" }], "stateMutability": "view" }, { "type": "function", "name": "quorumUpdateBlockNumber", "inputs": [{ "name": "", "type": "uint8", "internalType": "uint8" }], "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "stateMutability": "view" }, { "type": "function", "name": "registerOperator", "inputs": [{ "name": "quorumNumbers", "type": "bytes", "internalType": "bytes" }, { "name": "socket", "type": "string", "internalType": "string" }, { "name": "params", "type": "tuple", "internalType": "struct IBLSApkRegistry.PubkeyRegistrationParams", "components": [{ "name": "pubkeyRegistrationSignature", "type": "tuple", "internalType": "struct BN254.G1Point", "components": [{ "name": "X", "type": "uint256", "internalType": "uint256" }, { "name": "Y", "type": "uint256", "internalType": "uint256" }] }, { "name": "pubkeyG1", "type": "tuple", "internalType": "struct BN254.G1Point", "components": [{ "name": "X", "type": "uint256", "internalType": "uint256" }, { "name": "Y", "type": "uint256", "internalType": "uint256" }] }, { "name": "pubkeyG2", "type": "tuple", "internalType": "struct BN254.G2Point", "components": [{ "name": "X", "type": "uint256[2]", "internalType": "uint256[2]" }, { "name": "Y", "type": "uint256[2]", "internalType": "uint256[2]" }] }] }, { "name": "operatorSignature", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithSaltAndExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "registerOperatorWithChurn", "inputs": [{ "name": "quorumNumbers", "type": "bytes", "internalType": "bytes" }, { "name": "socket", "type": "string", "internalType": "string" }, { "name": "params", "type": "tuple", "internalType": "struct IBLSApkRegistry.PubkeyRegistrationParams", "components": [{ "name": "pubkeyRegistrationSignature", "type": "tuple", "internalType": "struct BN254.G1Point", "components": [{ "name": "X", "type": "uint256", "internalType": "uint256" }, { "name": "Y", "type": "uint256", "internalType": "uint256" }] }, { "name": "pubkeyG1", "type": "tuple", "internalType": "struct BN254.G1Point", "components": [{ "name": "X", "type": "uint256", "internalType": "uint256" }, { "name": "Y", "type": "uint256", "internalType": "uint256" }] }, { "name": "pubkeyG2", "type": "tuple", "internalType": "struct BN254.G2Point", "components": [{ "name": "X", "type": "uint256[2]", "internalType": "uint256[2]" }, { "name": "Y", "type": "uint256[2]", "internalType": "uint256[2]" }] }] }, { "name": "operatorKickParams", "type": "tuple[]", "internalType": "struct IRegistryCoordinator.OperatorKickParam[]", "components": [{ "name": "quorumNumber", "type": "uint8", "internalType": "uint8" }, { "name": "operator", "type": "address", "internalType": "address" }] }, { "name": "churnApproverSignature", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithSaltAndExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }, { "name": "operatorSignature", "type": "tuple", "internalType": "struct ISignatureUtils.SignatureWithSaltAndExpiry", "components": [{ "name": "signature", "type": "bytes", "internalType": "bytes" }, { "name": "salt", "type": "bytes32", "internalType": "bytes32" }, { "name": "expiry", "type": "uint256", "internalType": "uint256" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "registries", "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }], "outputs": [{ "name": "", "type": "address", "internalType": "address" }], "stateMutability": "view" }, { "type": "function", "name": "renounceOwnership", "inputs": [], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "serviceManager", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IServiceManager" }], "stateMutability": "view" }, { "type": "function", "name": "setChurnApprover", "inputs": [{ "name": "_churnApprover", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "setEjectionCooldown", "inputs": [{ "name": "_ejectionCooldown", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "setEjector", "inputs": [{ "name": "_ejector", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "setOperatorSetParams", "inputs": [{ "name": "quorumNumber", "type": "uint8", "internalType": "uint8" }, { "name": "operatorSetParams", "type": "tuple", "internalType": "struct IRegistryCoordinator.OperatorSetParam", "components": [{ "name": "maxOperatorCount", "type": "uint32", "internalType": "uint32" }, { "name": "kickBIPsOfOperatorStake", "type": "uint16", "internalType": "uint16" }, { "name": "kickBIPsOfTotalStake", "type": "uint16", "internalType": "uint16" }] }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "setPauserRegistry", "inputs": [{ "name": "newPauserRegistry", "type": "address", "internalType": "contract IPauserRegistry" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "stakeRegistry", "inputs": [], "outputs": [{ "name": "", "type": "address", "internalType": "contract IStakeRegistry" }], "stateMutability": "view" }, { "type": "function", "name": "transferOwnership", "inputs": [{ "name": "newOwner", "type": "address", "internalType": "address" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "unpause", "inputs": [{ "name": "newPausedStatus", "type": "uint256", "internalType": "uint256" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "updateOperators", "inputs": [{ "name": "operators", "type": "address[]", "internalType": "address[]" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "updateOperatorsForQuorum", "inputs": [{ "name": "operatorsPerQuorum", "type": "address[][]", "internalType": "address[][]" }, { "name": "quorumNumbers", "type": "bytes", "internalType": "bytes" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "function", "name": "updateSocket", "inputs": [{ "name": "socket", "type": "string", "internalType": "string" }], "outputs": [], "stateMutability": "nonpayable" }, { "type": "event", "name": "ChurnApproverUpdated", "inputs": [{ "name": "prevChurnApprover", "type": "address", "indexed": false, "internalType": "address" }, { "name": "newChurnApprover", "type": "address", "indexed": false, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "EjectorUpdated", "inputs": [{ "name": "prevEjector", "type": "address", "indexed": false, "internalType": "address" }, { "name": "newEjector", "type": "address", "indexed": false, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "Initialized", "inputs": [{ "name": "version", "type": "uint8", "indexed": false, "internalType": "uint8" }], "anonymous": false }, { "type": "event", "name": "OperatorDeregistered", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operatorId", "type": "bytes32", "indexed": true, "internalType": "bytes32" }], "anonymous": false }, { "type": "event", "name": "OperatorRegistered", "inputs": [{ "name": "operator", "type": "address", "indexed": true, "internalType": "address" }, { "name": "operatorId", "type": "bytes32", "indexed": true, "internalType": "bytes32" }], "anonymous": false }, { "type": "event", "name": "OperatorSetParamsUpdated", "inputs": [{ "name": "quorumNumber", "type": "uint8", "indexed": true, "internalType": "uint8" }, { "name": "operatorSetParams", "type": "tuple", "indexed": false, "internalType": "struct IRegistryCoordinator.OperatorSetParam", "components": [{ "name": "maxOperatorCount", "type": "uint32", "internalType": "uint32" }, { "name": "kickBIPsOfOperatorStake", "type": "uint16", "internalType": "uint16" }, { "name": "kickBIPsOfTotalStake", "type": "uint16", "internalType": "uint16" }] }], "anonymous": false }, { "type": "event", "name": "OperatorSocketUpdate", "inputs": [{ "name": "operatorId", "type": "bytes32", "indexed": true, "internalType": "bytes32" }, { "name": "socket", "type": "string", "indexed": false, "internalType": "string" }], "anonymous": false }, { "type": "event", "name": "OwnershipTransferred", "inputs": [{ "name": "previousOwner", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newOwner", "type": "address", "indexed": true, "internalType": "address" }], "anonymous": false }, { "type": "event", "name": "Paused", "inputs": [{ "name": "account", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newPausedStatus", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "PauserRegistrySet", "inputs": [{ "name": "pauserRegistry", "type": "address", "indexed": false, "internalType": "contract IPauserRegistry" }, { "name": "newPauserRegistry", "type": "address", "indexed": false, "internalType": "contract IPauserRegistry" }], "anonymous": false }, { "type": "event", "name": "QuorumBlockNumberUpdated", "inputs": [{ "name": "quorumNumber", "type": "uint8", "indexed": true, "internalType": "uint8" }, { "name": "blocknumber", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }, { "type": "event", "name": "Unpaused", "inputs": [{ "name": "account", "type": "address", "indexed": true, "internalType": "address" }, { "name": "newPausedStatus", "type": "uint256", "indexed": false, "internalType": "uint256" }], "anonymous": false }
];
const delegationManager = new ethers_1.ethers.Contract(delegationManagerAddress, delegationABI, wallet);
const contract = new ethers_1.ethers.Contract(contractAddress, contractABI, wallet);
const registryContract = new ethers_1.ethers.Contract(registryCoordinatorAddress, registryABI, wallet);
const signAndRespondToTask = (taskIndex, taskName) => __awaiter(void 0, void 0, void 0, function* () {
    const message = `Hello, ${taskName}`;
    const messageHash = ethers_1.ethers.utils.solidityKeccak256(["string"], [message]);
    const messageBytes = ethers_1.ethers.utils.arrayify(messageHash);
    const signature = yield wallet.signMessage(messageBytes);
    const tx = yield contract.respondToTask({ name: taskName, taskCreatedBlock: taskIndex }, taskIndex, signature);
    yield tx.wait();
    console.log(`Responded to task ${taskIndex} with signature ${signature}`);
});
const registerOperator = () => __awaiter(void 0, void 0, void 0, function* () {
    // Operator Registration to EL (commented out for now)
    // const tx1 = await delegationManager.registerAsOperator({
    //     earningsReceiver: await wallet.address,
    //     delegationApprover: "0x0000000000000000000000000000000000000000",
    //     stakerOptOutWindowBlocks: 0
    // }, "");
    // await tx1.wait();
    // console.log("Operator registered on EL successfully");
    const BLS = yield (0, bls_signatures_1.default)();
    const quorumNumbers = ethers_1.ethers.utils.hexlify([0x00]); // Example quorum number, modify as needed
    const socket = "127.0.0.1:8000"; // Example socket, modify as needed
    // Generate a new BLS secret key
    const seed = Uint8Array.from([
        0, 50, 6, 244, 24, 199, 1, 25, 52, 88, 192,
        19, 18, 12, 89, 6, 220, 18, 102, 58, 209, 82,
        12, 62, 89, 110, 182, 9, 44, 20, 254, 22
    ]);
    const sk = BLS.AugSchemeMPL.key_gen(seed);
    const pkG1 = sk.get_g1();
    const pkG2 = sk.get_g2();
    const g1HashedMsgToSign = yield registryContract.pubkeyRegistrationMessageHash(wallet.address);
    const g1HashedMsgArray = new Uint8Array([
        ...ethers_1.ethers.utils.arrayify(g1HashedMsgToSign.X),
        ...ethers_1.ethers.utils.arrayify(g1HashedMsgToSign.Y)
    ]);
    const signedMsg = BLS.AugSchemeMPL.sign(sk, g1HashedMsgArray).serialize();
    const pubkeyG1 = pkG1.serialize();
    const pubkeyG2 = pkG2.serialize();
    console.log("signedMsg:", signedMsg);
    console.log("pubkeyG1:", pubkeyG1);
    console.log("pubkeyG2:", pubkeyG2);
    const signedMsgX = ethers_1.ethers.utils.hexlify(signedMsg.slice(0, 32));
    const signedMsgY = ethers_1.ethers.utils.hexlify(signedMsg.slice(32, 64));
    const pubkeyG1X = ethers_1.ethers.utils.hexlify(pubkeyG1.slice(0, 32));
    const pubkeyG1Y = ethers_1.ethers.utils.hexlify(pubkeyG1.slice(32, 48));
    const pubkeyG2X0 = ethers_1.ethers.utils.hexlify(pubkeyG2.slice(0, 32));
    const pubkeyG2X1 = ethers_1.ethers.utils.hexlify(pubkeyG2.slice(32, 64));
    const pubkeyG2Y0 = ethers_1.ethers.utils.hexlify(pubkeyG2.slice(64, 96));
    // const pubkeyG2Y1 = ethers.utils.hexlify(pubkeyG2.slice(96, 128));
    console.log("signedMsgX:", signedMsgX);
    console.log("signedMsgY:", signedMsgY);
    console.log("pubkeyG1X:", pubkeyG1X);
    console.log("pubkeyG1Y:", pubkeyG1Y);
    console.log("pubkeyG2X0:", pubkeyG2X0);
    console.log("pubkeyG2X1:", pubkeyG2X1);
    console.log("pubkeyG2Y0:", pubkeyG2Y0);
    // console.log("pubkeyG2Y1:", pubkeyG2Y1);
    const pubkeyRegParams = {
        pubkeyRegistrationSignature: {
            X: ethers_1.ethers.BigNumber.from(signedMsgX),
            Y: ethers_1.ethers.BigNumber.from(signedMsgY)
        },
        pubkeyG1: {
            X: ethers_1.ethers.BigNumber.from(pubkeyG1X),
            Y: ethers_1.ethers.BigNumber.from(pubkeyG1Y)
        },
        pubkeyG2: {
            X: [
                ethers_1.ethers.BigNumber.from(pubkeyG2X0),
                ethers_1.ethers.BigNumber.from(pubkeyG2X1)
            ],
            Y: [
                ethers_1.ethers.BigNumber.from(pubkeyG2Y0),
                ethers_1.ethers.BigNumber.from(0)
            ]
        }
    };
    console.log("pubkeyRegParams:", pubkeyRegParams);
    // Generate operator signature with ECDSA key
    const salt = ethers_1.ethers.utils.hexlify(ethers_1.ethers.utils.randomBytes(32));
    const expiry = Math.floor(Date.now() / 1000) + 3600; // Example expiry, 1 hour from now
    const msgToSign = ethers_1.ethers.utils.solidityKeccak256(["address", "address", "bytes32", "uint256"], [wallet.address, registryCoordinatorAddress, salt, expiry]);
    const operatorSignature = yield wallet.signMessage(ethers_1.ethers.utils.arrayify(msgToSign));
    const operatorSignatureWithSaltAndExpiry = {
        signature: ethers_1.ethers.utils.arrayify(operatorSignature),
        salt: ethers_1.ethers.utils.arrayify(salt),
        expiry: expiry
    };
    console.log("operatorSignatureWithSaltAndExpiry:", operatorSignatureWithSaltAndExpiry);
    console.log(quorumNumbers, socket, pubkeyRegParams, operatorSignatureWithSaltAndExpiry);
    const tx2 = yield registryContract.registerOperator(0x00, socket, pubkeyRegParams, operatorSignatureWithSaltAndExpiry, { gasLimit: "30000000" });
    console.log(tx2);
    yield tx2.wait();
    console.log("Operator registered on AVS successfully");
});
const monitorNewTasks = () => __awaiter(void 0, void 0, void 0, function* () {
    const newTask = yield contract.createNewTask("EigenWorld");
    console.log("Test Task Submitted: ", newTask);
    contract.on("NewTaskCreated", (taskIndex, task) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`New task created: ${taskIndex}`, task);
        yield signAndRespondToTask(taskIndex, task.name);
    }));
    console.log("Monitoring for new tasks...");
});
const main = () => __awaiter(void 0, void 0, void 0, function* () {
    yield registerOperator();
    monitorNewTasks().catch((error) => {
        console.error("Error monitoring tasks:", error);
    });
});
main().catch((error) => {
    console.error("Error in main function:", error);
});
